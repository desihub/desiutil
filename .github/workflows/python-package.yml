# Workflow is based on the Astropy GitHub actions workflow, ci_workflows.yml
name: CI

on:
    push:
        branches:
            - '*'
        tags:
            - '*'
    pull_request:

jobs:
    tests:
        name: Standard Python tests.
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: true
            matrix:
                os: [ubuntu-latest]
                python-version: [3.6, 3.7, 3.8]
                astropy-version: ['<3.0', '<4.1']  #, '>4.0']

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}
            - name: Install Python dependencies
              run: |
                python -m pip install --upgrade pip
                python -m pip install pytest
                if [ -f requirements.txt ]; then pip install -r requirements.txt; pip install .; fi
                pip install -U "astropy${{ matrix.astropy-version }}"
            - name: Run the test
              run: |
                pytest

    coverage:
        name: Code coverage test.
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: true
            matrix:
                os: [ubuntu-latest]
                python-version: [3.8]

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}
            - name: Install Python dependencies
              run: |
                python -m pip install --upgrade pip
                python -m pip install pytest pytest-cov coveralls
                if [ -f requirements.txt ]; then pip install -r requirements.txt; pip install .; fi
            - name: Run the test with coverage
              run: |
                pytest --cov
            - name: Coveralls
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                coveralls

    docs:
        name: Check Sphinx documentation.
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                python-version: [3.8]

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}
            - name: Install Python dependencies
              run: |
                python -m pip install --upgrade pip
                python -m pip install Sphinx
            - name: Test the documentation
              run: |
                sphinx-build -W --keep-going -b html doc doc/_build/html

    style:
        name: Check code style; allow failures.
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                python-version: [3.8]

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                python-version: ${{ matrix.python-version }}
            - name: Install Python dependencies
              run: |
                python -m pip install --upgrade pip
                python -m pip install pycodestyle
            - name: Test the style
              # This is equivalent to an allowed falure.
              continue-on-error: true
              run: |
                pycodestyle --count py/desiutil
